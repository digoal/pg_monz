# PostgreSQL user parameter
# Modified by digoal.Zhou

#
# Cluster level
#
# PostgreSQL is running (INT)
UserParameter=psql.running[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select 1" > /dev/null 2>&1 ; echo $?
# Max Connections
UserParameter=psql.server_maxcon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "show max_connections"
# Used Connections
UserParameter=psql.server_usedcon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity"
# Free Connections
UserParameter=psql.server_freecon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select t2.max::int-t1.used free from (select count(*) used,sum(case state when 'idle in transaction' then 1 else 0 end) idle,sum(case state when 'active' then 1 else 0 end) active from pg_stat_activity)t1,(select setting as max from pg_settings where name = 'max_connections')t2"
# Idle In Transactions Connections
UserParameter=psql.server_idleinxactcon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state='idle in transaction'"
# Active Connections
UserParameter=psql.server_activecon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state='active'"
# Idle Connections
UserParameter=psql.server_idlecon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state='idle'"
# Waiting Connections
UserParameter=psql.server_waitingcon[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where waiting = 't'"

# pg_stat_database (BIGINT) bytes
# Get the total number of committed transactions
UserParameter=psql.tx_committed[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select sum(xact_commit) from pg_stat_database"
# Get the total number of rolled back transactions
UserParameter=psql.tx_rolledback[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select sum(xact_rollback) from pg_stat_database"

# pg_stat_bgwriter (BIGINT)
# Get number of checkpoint count (by checkpoint_timeout)
UserParameter=psql.checkpoints_timed[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select checkpoints_timed from pg_stat_bgwriter"
# Get number of checkpoint count (by checkpoint_segments)
UserParameter=psql.checkpoints_req[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select checkpoints_req from pg_stat_bgwriter"
UserParameter=psql.buffers_checkpoint[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select buffers_checkpoint from pg_stat_bgwriter"
UserParameter=psql.buffers_clean[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select buffers_clean from pg_stat_bgwriter"
UserParameter=psql.maxwritten_clean[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select maxwritten_clean from pg_stat_bgwriter"
UserParameter=psql.buffers_backend[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select buffers_backend from pg_stat_bgwriter"
UserParameter=psql.buffers_backend_fsync[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select buffers_backend_fsync from pg_stat_bgwriter"
UserParameter=psql.buffers_alloc[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select buffers_alloc from pg_stat_bgwriter"
# pg_stat_bgwriter (numeric)
UserParameter=psql.checkpoint_write_time[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select checkpoint_write_time from pg_stat_bgwriter"
UserParameter=psql.checkpoint_sync_time[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select checkpoint_sync_time from pg_stat_bgwriter"

# shared buffers(BIGINT) bytes
UserParameter=psql.shared_buffers[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select t1.setting*t2.setting from (select setting::int8 from pg_settings where name = 'shared_buffers')t1, (select setting::int8 from pg_settings where name = 'block_size')t2"
# cluster size(BIGINT) bytes
UserParameter=psql.cluster_size[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select sum(pg_database_size(datname)) from pg_database"

# Get number of slow queries
UserParameter=psql.slow_queries[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state = 'active' and now() - query_start > '$5 sec'::interval"
UserParameter=psql.slow_select_queries[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state = 'active' and now() - query_start > '$5 sec'::interval and query ilike 'select%'"
UserParameter=psql.slow_dml_queries[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_stat_activity where state = 'active' and now() - query_start > '$5 sec'::interval and query ~* '^(insert|update|delete)'"

# standby lag (bytes)
UserParameter=psql.standby_lag[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(pg_xlog_location_diff(pg_current_xlog_location(),flush_location)),0) from pg_stat_replication"
# Cluster remain xids
UserParameter=psql.remain_xids[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select min(2000000000-age(datfrozenxid)) from pg_database"
# session waiting time(second)
UserParameter=psql.wait_seconds[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(trunc(EXTRACT(EPOCH FROM now()-query_start))),0) sec from pg_stat_activity where waiting"
# Today's pg_log size (bytes)
# use $PGDATA/pg_log soft link to real path
UserParameter=psql.pg_log_bytes[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select sum((pg_stat_file(file)).size) from (select dir||'/'||pg_ls_dir(dir) as file from (select setting as dir from pg_settings where name='log_directory') t)t where (pg_stat_file(file)).change>=current_date"
# prepared xacts, max prepared xact time(sec)
UserParameter=psql.prepared_xacts[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select count(*) from pg_prepared_xacts"
UserParameter=psql.prepared_seconds[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(trunc(EXTRACT(EPOCH FROM now()-prepared))),0) sec from pg_prepared_xacts"
# max long time query(s)
UserParameter=psql.query_maxsec[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(trunc(EXTRACT(EPOCH FROM now()-query_start))),0) from pg_stat_activity where state='active';
# max idle in xact time(s)
UserParameter=psql.idle_inxacts_maxsec[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(trunc(EXTRACT(EPOCH FROM now()-xact_start))),0) from pg_stat_activity where state='idle in transaction'"
# max xact time(s)
UserParameter=psql.xacts_maxsec[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(max(trunc(EXTRACT(EPOCH FROM now()-xact_start))),0) from pg_stat_activity where state='idle in transaction' or state='active'"
# 10 min wals(bytes), you can use zabbix MACROS instead 10 constant.
UserParameter=psql.wal_bytes_10min[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(sum((pg_stat_file(file)).size),0) from (select 'pg_xlog/'||pg_ls_dir('pg_xlog') as file)t where now()-(pg_stat_file(file)).change<=interval '10 min'"
# autovacuum and archive_mode
# off or on
UserParameter=psql.autovacuum[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select setting from pg_settings where name='autovacuum'"
UserParameter=psql.archive_mode[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select setting from pg_settings where name='archive_mode'"

#
# Database level (BIGINT)
# Nested in db.list.discovery
#
# Database Age
UserParameter=psql.database_age[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select age(datfrozenxid) from pg_database where datname = '$5'"
# Get the size of a Database (in bytes)
UserParameter=psql.db_size[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select pg_database_size('$5') from pg_database where datname = '$5'"
# Get number of active connections for a specified database
UserParameter=psql.db_connections[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select numbackends from pg_stat_database where datname = '$5'"
# Get number of committed/rolled back transactions for a specified database
UserParameter=psql.db_tx_committed[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select xact_commit from pg_stat_database where datname = '$5'"
UserParameter=psql.db_tx_rolledback[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select xact_rollback from pg_stat_database where datname = '$5'"
# Cache Hit Ratio
UserParameter=psql.cachehit_ratio[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "SELECT round(blks_hit*100/(blks_hit+blks_read), 2) AS cache_hit_ratio FROM pg_stat_database WHERE datname = '$5' and blks_read > 0 union all select 0.00 AS cache_hit_ratio order by cache_hit_ratio desc limit 1"
# Get number of tuples returned for a specified database
UserParameter=psql.db_returned[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select tup_returned from pg_stat_database where datname = '$5'"
# Get number of tuples fetched for a specified database
UserParameter=psql.db_fetched[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select tup_fetched from pg_stat_database where datname = '$5'"
# Get number of tuples inserted for a specified database
UserParameter=psql.db_inserted[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select tup_inserted from pg_stat_database where datname = '$5'"
# Get number of tuples updated for a specified database
UserParameter=psql.db_updated[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select tup_updated from pg_stat_database where datname = '$5'"
# Get number of tuples deleted for a specified database
UserParameter=psql.db_deleted[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select tup_deleted from pg_stat_database where datname = '$5'"
# conflicts by recovery
UserParameter=psql.db_conflicts[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select conflicts from pg_stat_database where datname = '$5'"
# Get number of temp files
UserParameter=psql.db_temp_files[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select temp_files from pg_stat_database where datname = '$5'"
# Get temp file size (in bytes)
UserParameter=psql.db_temp_bytes[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select temp_bytes from pg_stat_database where datname = '$5'"
# Get number of deadlocks for a specified database (9.2 or later)
UserParameter=psql.db_deadlocks[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select deadlocks from pg_stat_database where datname = '$5'"
# Get percentage of dead tuples of all tables for a specified database
UserParameter=psql.db_dead_tup_ratio[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select round(sum(n_dead_tup)*100/sum(n_live_tup+n_dead_tup), 2) as dead_tup_ratio from pg_stat_all_tables where n_live_tup > 0"


#
# Table level
# Nested in db_table.list.discovery
#
# Get table cache hit ratio of a specific table
UserParameter=psql.table_cachehit_ratio[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select round(heap_blks_hit*100/(heap_blks_hit+heap_blks_read), 2) as cache_hit_ratio from pg_statio_user_tables where schemaname = '$5' and relname = '$6' and heap_blks_read > 0 union all select 0.00 as cache_hit_ratio order by cache_hit_ratio desc limit 1"
# Get number of sequencial scan of a specific table
UserParameter=psql.table_seq_scan[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select seq_scan from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
# Get number of index scan of a specific table
UserParameter=psql.table_idx_scan[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(idx_scan,0) from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
# Get number of vacuum count of a specific table
UserParameter=psql.table_vacuum_count[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select vacuum_count from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
# Get number of analyze count of a specific table
UserParameter=psql.table_analyze_count[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select analyze_count from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
# Get number of autovacuum count of a specific table
UserParameter=psql.table_autovacuum_count[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select autovacuum_count from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
# Get number of autoanalyze count of a specific table
UserParameter=psql.table_autoanalyze_count[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select autoanalyze_count from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"

# Get number of tuples of a specific table
UserParameter=psql.table_n_tup_ins[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_tup_ins from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_n_tup_upd[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_tup_upd from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_n_tup_del[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_tup_del from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_seq_tup_read[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select seq_tup_read from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_idx_tup_fetch[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select coalesce(idx_tup_fetch,0) from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_n_tup_hot_upd[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_tup_hot_upd from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_n_live_tup[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_live_tup from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"
UserParameter=psql.table_n_dead_tup[*],psql -h $1 -p $2 -U $3 -d $4 -t -c "select n_dead_tup from pg_stat_user_tables where schemaname = '$5' and relname = '$6'"

#
# Discovery Rule
#
# Database Discovery
UserParameter=db.list.discovery[*],$5/find_dbname.sh $1 $2 $3 $4
# Table Discovery
UserParameter=db_table.list.discovery[*],$5/find_dbname_table.sh $1 $2 $3 $4
